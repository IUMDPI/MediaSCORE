User: # Abstract
  #actAs: { Timestampable: ~ }
  inheritance:
    extends: sfGuardUser
    type: column_aggregation
    keyField: type
    keyValue: 1
  columns:
    #first_name:   { type: string(255), notnull: true }
    #last_name:    { type: string(255), notnull: true }
    #password:     { type: string(255), notnull: true }
    #email:        { type: string(255) }
    phone:        { type: string(255) }
    role:         { type: string(255), notnull: true }
    mediascore_access: { type: boolean, notnull: true,  default: true}
    mediariver_access: { type: boolean, notnull: true,  default: true} 
   
    
    

Evaluator:
  inheritance:
    extends: User
    type: column_aggregation
    keyField: type
    keyValue: 2

Person:
  inheritance:
    extends: User
    type: column_aggregation
    keyField: type
    keyValue: 3
  columns:
    contact_info: { type: text }
    unit_id: { type: integer }
    title: { type: string(255) }
  relations:
    Units: { class: Unit, local: person_id, foreign: unit_id, refClass:UnitPerson }
    consultationRecords: { class: EvaluatorHistory, local: person_id, foreign: evaluator_history_id, refClass: EvaluatorHistoryPersonnel }


Store: # Abstract
  actAs: 
    Timestampable: ~ 
    Sluggable:
      fields: [name]
      name: name_slug
      type: string
      length: 255 
      canUpdate: true
      unique: true
  columns:
    name:         { type: string(255), notnull: true }
    inst_id:      { type: text, notnull: true } # The institutional ID - can be modified from the UI
    notes:        { type: text }
    creator_id:      { type: integer } # NOTNULL
    #last_updated: { type: datetime }
    last_editor_id:  { type: integer }
  relations:
    Creator: { class: sfGuardUser, local: creator_id, foreign: id, foreignAlias: createdUnits } # Can't link to Evaluator, only User (?); Maybe because Evaluator table doesn't actually exist ?
    Editor: { class: sfGuardUser, local: last_editor_id, foreign: id, foreignAlias: editedUnits }

Unit:
  inheritance:
    extends: Store
    type: column_aggregation
    keyField: type
    keyValue: 1
  columns:
    resident_structure_description: { type: text }
  relations:
    StorageLocations: { class: StorageLocation, local: unit_id, foreign: storage_location_id, refClass: UnitStorageLocation }
    Personnel: { class: Person, local: unit_id, foreign: person_id, refClass: UnitPerson }
    Collection: { local: id, foreign: parent_node_id, foreignAlias: containCollections}
    
UnitMultipleCollection:
  inheritance:
    extends: Store
    type: column_aggregation
    keyField: type
    keyValue: 1
  columns:
    resident_structure_description: { type: text }
  relations:
    StorageLocations: { class: StorageLocation, local: unit_id, foreign: storage_location_id, refClass: UnitStorageLocation }
    Personnel: { class: Person, local: unit_id, foreign: person_id, refClass: UnitPerson }
    CollectionMultipleAssetGroup: { local: id, type: many , foreign: parent_node_id, foreignAlias: containCollections}

UnitStorageLocation:
  columns:
    unit_id: { type: integer, primary: true }
    storage_location_id: { type: integer, primary: true }
  relations:
    Unit:
      local: unit_id
      foreign: id
      type: one
      onDelete: CASCADE
      onUpdate: CASCADE
    StorageLocation:
      local: storage_location_id
      foreign: id
      type: one
      onDelete: CASCADE
      onUpdate: CASCADE

UnitPerson:
  columns:
    unit_id: { type: integer, primary: true }
    person_id: { type: integer, primary: true }
  relations:
    Unit:
      local: unit_id
      foreign: id
      type: one
      onDelete: CASCADE
      onUpdate: CASCADE
    Person:
      local: person_id
      foreign: id
      type: one
      onDelete: CASCADE
      onUpdate: CASCADE

       

    
SubUnit: # Abstract
  inheritance:
    extends: Store
    type: column_aggregation
    keyField: type
    keyValue: 2
  columns:
    parent_node_id: { type: integer }
  relations:
    Unit: { type: many, local: parent_node_id, foreign: id, foreignAlias: childNodes }

Collection:
  inheritance:
    extends: SubUnit
    type: column_aggregation
    keyField: type
    keyValue: 3 # column_aggregation does not permit nested hierarchies beyond 1 layer of abstraction
  columns:
    status: { type: string(255) }
    characteristics: { type: text }
    project_title: { type: string(255) }
    iub_unit: { type: integer }
    iub_work: { type: integer }
    date_completed: { type: datatime }
    score_subject_interest: { type: float }
    notes_subject_interest: { type: text }
    score_content_quality: { type: float }
    notes_content_quality: { type: text }
    score_rareness: { type: float }
    notes_rareness: { type: text }
    score_documentation: { type: float }
    notes_documentation: { type: text }
    score_technical_quality: { type: float }
    notes_technical_quality: { type: text }
    unknown_technical_quality: { type: boolean }
    score_technical_quality: { type: integer }
    notes_technical_quality: { type: text }
    collection_score: { type: integer }
    generation_statement: { type: string(255) }
    generation_statement_notes: { type: text }
    ip_statement: { type: string(255) }
    ip_statement_notes: {type: text }
    general_notes: { type: text } 
  relations:
    Unit: { local: parent_node_id, foreign: id, foreignAlias: heldByUnit ,onDelete: CASCADE}
    AssetGroup: { local: id, foreign: parent_node_id, foreignAlias: containsAssets}
    StorageLocations: { class: StorageLocation, local: collection_id, foreign: storage_location_id, refClass: CollectionStorageLocation }
    
CollectionMultipleAssetGroup:
  inheritance:
    extends: SubUnit
    type: column_aggregation
    keyField: type
    keyValue: 3 # column_aggregation does not permit nested hierarchies beyond 1 layer of abstraction
  columns:
    status: { type: string(255) }
    characteristics: { type: text }
    project_title: { type: string(255) }
    iub_unit: { type: integer }
    iub_work: { type: integer }
    date_completed: { type: datatime }
    score_subject_interest: { type: float }
    notes_subject_interest: { type: text }
    score_content_quality: { type: float }
    notes_content_quality: { type: text }
    score_rareness: { type: float }
    notes_rareness: { type: text }
    score_documentation: { type: float }
    notes_documentation: { type: text }
    score_technical_quality: { type: float }
    notes_technical_quality: { type: text }
    unknown_technical_quality: { type: boolean }
    score_technical_quality: { type: integer }
    notes_technical_quality: { type: text }
    collection_score: { type: integer }
    generation_statement: { type: string(255) }
    generation_statement_notes: { type: text }
    ip_statement: { type: string(255) }
    ip_statement_notes: {type: text }
    general_notes: { type: text } 
  relations:
    Unit: { local: parent_node_id, foreign: id, foreignAlias: heldByUnit ,onDelete: CASCADE}
    AssetGroup: { local: id, type: many ,  foreign: parent_node_id, foreignAlias: containsAssets}
    StorageLocations: { class: StorageLocation, local: collection_id, foreign: storage_location_id, refClass: CollectionStorageLocation }

CollectionStorageLocation:
  columns:
    collection_id: { type: integer, primary: true }
    storage_location_id: { type: integer, primary: true }
  relations:
    Collection:
      local: collection_id
      foreign: id
      type: one
      onDelete: CASCADE
      onUpdate: CASCADE
    StorageLocation:
      local: storage_location_id
      foreign: id
      type: one
      onDelete: CASCADE
      onUpdate: CASCADE

AssetGroup:
  inheritance:
    extends: SubUnit
    type: column_aggregation
    keyField: type
    keyValue: 4 # column_aggregation does not permit nested hierarchies beyond 1 layer of abstraction
  columns:
    location: { type: string(255) }
    format_id: { type: integer }
    is_imported: { type: boolean }
  relations:
    Collection: { local: parent_node_id, foreign: id, foreignAlias: heldByCollection ,onDelete: CASCADE}
    FormatType: { local: format_id, foreign: id, foreignAlias: heldByAssetGroups ,onDelete: CASCADE}
    EvaluatorHistory: { class: EvaluatorHistory, type: many, local: id, foreign: asset_group_id,onDelete: CASCADE }

StorageLocation:
  actAs: { Timestampable: ~ }
  columns:
    name: { type: string(255), notnull: true }
    resident_structure_description: { type: text, notnull: true }
    env_rating: { type: integer }
  relations:
    Units: { class: Unit, local: storage_location_id, foreign: unit_id, refClass:UnitStorageLocation }
    Collections: { class: Collection, local: storage_location_id, foreign: collection_id, refClass:CollectionStorageLocation }

EvaluatorHistory:
  #actAs: { Timestampable: ~ }
  columns:
    type: { type: integer, notnull: true }
    # date_committed: { type: timestamp }
    evaluator_id: { type: integer, notnull: true }
    #personnel: { type: integer }
    asset_group_id: { type: integer } # AssetGroup
    updated_at: { type: date }
  relations:
    Evaluator: { class: sfGuardUser, local: evaluator_id, foreign: id, foreignAlias: HistoryInstances }
    consultedPersonnel: { class: Person, local: evaluator_history_id, foreign: person_id, refClass: EvaluatorHistoryPersonnel, foreignAlias: consultedForAssetGroups }
    Store: { local: asset_group_id, foreign: id, foreignAlias: EvaluatorActions } # Inheritance related problem

EvaluatorHistoryPersonnel: # For the many-to-many relationship between EvaluatorHistory and Person entities
  columns:
    evaluator_history_id: { type: integer }
    person_id: { type: integer }
  relations:
    EvaluatorHistory:
      local: evaluator_history_id
      foreign: id
      type: one
      onDelete: CASCADE
      onUpdate: CASCADE
    Person:
      local: person_id
      foreign: id
      type: one
      onDelete: CASCADE
      onUpdate: CASCADE

#  relations:
#    EvaluatorHistory: { foreignAlias: Personnel }
#    Person: { foreignAlias: EvaluatorHistoryInstances }

# The Media Format Types

FormatType:
  actAs: { Timestampable: ~ }
  columns:
    quantity: { type: integer, notnull: true }
    generation: { type: integer, notnull: true }
    year_recorded: { type: string(255), notnull: true }
    copies: { type: boolean }
    stock_brand: { type: string(255) }
    off_brand: { type: boolean }
    fungus: { type: boolean }
    other_contaminants: { type: boolean }
    duration: {type: string(255), notnull: true }
    duration_type: { type: string(255) }
    duration_type_methodology: { type: string(255) }
    format_notes: { type:text }
    asset_score: { type:float }

# The Specific Format Types

MetalDisc:
  inheritance:
    extends: FormatType
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 1 # All are aggregated within the FormatType table
  columns:
    material: { type: integer, notnull: true }
    oxidationCorrosion: { type: boolean, notnull: true }

ReelCassetteFormatType: # Abstract
  inheritance:
    extends: FormatType
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 2
  columns:
    pack_deformation: { type: integer }

# All Format Types Derived from ReelCassetteFormatType

AudiotapeFormatType: # Abstract
  inheritance:
    extends: ReelCassetteFormatType
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 3 # All are aggregated within the FormatType table
  columns:
    noise_reduction: { type: boolean, notnull: true }

AnalogAudiocassette:
  inheritance:
    extends: AudiotapeFormatType
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 4 # All are aggregated within the FormatType table
  columns:
    tape_type: { type: integer, notnull: true }
    thin_tape: { type: boolean }
    slow_speed: { type: boolean }
    sound_field: { type: integer, notnull: true }
    soft_binder_syndrome: { type: integer }

Film:
  inheritance:
    extends: ReelCassetteFormatType
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 5 # All are aggregated within the FormatType table
  columns:
    gauge: { type: integer, notnull: true }
    color: { type: integer, notnull: true }
    colorFade: { type: boolean }
    soundtrackFormat: { type: integer }
    substrate: { type: integer, notnull: true }
    strongOdor: { type: boolean }
    vinegarOdor: { type: boolean }
    ADStripLevel: { type: integer }
    shrinkage: { type: boolean }
    levelOfShrinkage: { type: integer }
    rust: { type: boolean }
    discoloration: { type: boolean }
    surfaceBlisteringBubbling: { type: boolean }

DAT:
  inheritance:
    extends: ReelCassetteFormatType
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 6 # All are aggregated within the FormatType table
  columns:
    thinTape: { type: boolean }
    1993OrEarlier: { type: boolean }
    dataGradeTape: { type: boolean }
    longPlay32K96K: { type: boolean }

SoundWireReel:
  inheritance:
    extends: ReelCassetteFormatType
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 7 # All are aggregated within the FormatType table
  columns:
    corrosionRustOxidation: { type: boolean }
    composition: { type: integer }
    nonStandardBrand: { type: boolean }

OpenReelAudioTapeFormatType: # Abstract
  inheritance:
    extends: AudiotapeFormatType
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 8 # All are aggregated within the FormatType table
  columns:
    trackConfiguration: { type: integer, notnull: true }
    tapeThickness: { type: integer }
    speed: { type: integer, notnull: true }
    softBinderSyndrome: { type: boolean }

OpenReelAudiotapePolyster:
  inheritance:
    extends: OpenReelAudioTapeFormatType
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 9 # All are aggregated within the FormatType table
    #          columns:

OpenReelAudiotapeAcetate:
  inheritance:
    extends: OpenReelAudioTapeFormatType
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 10 # All are aggregated within the FormatType table
  columns:
    vinegarOdor: { type: boolean }

OpenReelAudiotapePaper:
  inheritance:
    extends: OpenReelAudioTapeFormatType
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 11 # All are aggregated within the FormatType table
    #            #          columns:

OpenReelAudiotapePVC:
  inheritance:
    extends: OpenReelAudioTapeFormatType
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 12 # All are aggregated within the FormatType table
    #            #          columns:

DiskFormatType: # Abstract
  inheritance:
    extends: FormatType
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 13 # All are aggregated within the FormatType table
  columns:
    materialsBreakdown: { type: boolean }

SoftDiskFormatType: # Abstract
  inheritance:
    extends: DiskFormatType
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 14 # All are aggregated within the FormatType table
  columns:
    physicalDamage: { type: integer }

LacquerDisc:
  inheritance:
    extends: SoftDiskFormatType
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 15 # All are aggregated within the FormatType table
  columns:
    substrate: { type: integer, notnull: true }
    delamination: { type: boolean }
    plasticizerExudation: { type: boolean }

MiniDisc:
  inheritance:
    extends: SoftDiskFormatType
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 16 # All are aggregated within the FormatType table
  columns:
    recordingLayer: { type: integer, notnull: true }
    recordingSpeed: { type: integer, notnull: true }

Cylinder:
  inheritance:
    extends: SoftDiskFormatType
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 17 # All are aggregated within the FormatType table
  columns:
    cylinderType: { type: integer, notnull: true }

OpticalDiscFormatType: # Abstract
  inheritance:
    extends: SoftDiskFormatType
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 18 # All are aggregated within the FormatType table
  columns:
    reflectiveLayer: { type: string(255), notnull: true }
    dataLayer: { type: string(255), notnull: true }
    opticalDiscType: { type: integer, notnull: true }

SoundOpticalDisc:
  inheritance:
    extends: OpticalDiscFormatType
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 19 # All are aggregated within the FormatType table
    # columns:

OpticalVideo:
  inheritance:
    extends: OpticalDiscFormatType
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 20 # All are aggregated within the FormatType table
  columns:
    format: { type: integer, notnull: true }

PressedAudioDiscFormatType: # Abstract
  inheritance:
    extends: SoftDiskFormatType
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 21 # All are aggregated within the FormatType table
    #columns:

PressedSeventyEightRPMDisc:
  inheritance:
    extends: PressedAudioDiscFormatType
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 22 # All are aggregated within the FormatType table
    #            #columns:

PressedLPDisc:
  inheritance:
    extends: PressedAudioDiscFormatType
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 23 # All are aggregated within the FormatType table
    #            #            #columns:

PressedFortyFiveRPMDisc:
  inheritance:
    extends: PressedAudioDiscFormatType
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 24 # All are aggregated within the FormatType table
    #            #            #columns:

StandardizedRecordingFormatType: # Abstract
  inheritance:
    extends: DiskFormatType
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 25 # All are aggregated within the FormatType table
  columns:
    recordingStandard: { type: integer, notnull: true }

Laserdisc:
  inheritance:
    extends: StandardizedRecordingFormatType
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 26 # All are aggregated within the FormatType table
  columns:
    recordingSpeed: { type: integer, notnull: true }
    publicationYear: { type: date, notnull: true }

XDCamOptical:
  inheritance:
    extends: StandardizedRecordingFormatType
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 27 # All are aggregated within the FormatType table
  columns:
    format: { type: integer, notnull: true }
    capacityLayers: { type: integer, notnull: true }
    codec: { type: string(255), notnull: true }
    dataRate: { type: string(255), notnull: true }

VideoRecordingFormatType: # Abstract
  inheritance:
    extends: FormatType
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 28 # All are aggregated within the FormatType table
  columns:
    recordingStandard: { type: integer, notnull: true }
    sheddingSoftBinder: { type: boolean }

Betamax:
  inheritance:
    extends: VideoRecordingFormatType
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 29 # All are aggregated within the FormatType table
  columns:
    formatVersion: { type: string(255), notnull: true }
    oxide: { type: integer, notnull: true }

ReelVideoRecordingFormatType: # Abstract
  inheritance:
    extends: VideoRecordingFormatType
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 30 # All are aggregated within the FormatType table
  columns:
    format: { type: integer, notnull: true }

EightMM:
  inheritance:
    extends: ReelVideoRecordingFormatType
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 31 # All are aggregated within the FormatType table
  columns:
    recordingSpeed: { type: integer, notnull: true }
    binderSystem: { type: integer, notnull: true }

OpenReelVideoFormatType: # Abstract
  inheritance:
    extends: ReelVideoRecordingFormatType
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 32 # All are aggregated within the FormatType table
  columns:
    reelSize: { type: string(255), notnull: true }

TwoInchOpenReelVideo:
  inheritance:
    extends: OpenReelVideoFormatType
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 33 # All are aggregated within the FormatType table
    #columns:

OneInchOpenReelVideo:
  inheritance:
    extends: OpenReelVideoFormatType
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 34 # All are aggregated within the FormatType table
  columns:
    whiteResidue: { type: boolean }

HalfInchOpenReelVideo:
  inheritance:
    extends: OpenReelVideoFormatType
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 35 # All are aggregated within the FormatType table
    #            columns:

SizedVideoRecordingFormatType: # Abstract
  inheritance:
    extends: VideoRecordingFormatType
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 36 # All are aggregated within the FormatType table
  columns:
    size: { type: integer, notnull: true }

DV:
  inheritance:
    extends: SizedVideoRecordingFormatType
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 37 # All are aggregated within the FormatType table
  columns:
    recordingSpeed: { type: integer, notnull: true }

DVCam:
  inheritance:
    extends: SizedVideoRecordingFormatType
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 38 # All are aggregated within the FormatType table
#    columns:

FormatTypedVideoRecording: # Abstract
  inheritance:
    extends: SizedVideoRecordingFormatType
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 39 # All are aggregated within the FormatType table
  columns:
    formatTypedVideoRecordingFormat: { type: integer, notnull: true }

Betacam:
  inheritance:
    extends: FormatTypedVideoRecording
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 40 # All are aggregated within the FormatType table
#    columns:

VHS:
  inheritance:
    extends: FormatTypedVideoRecording
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 41 # All are aggregated within the FormatType table
  columns:
    recordingSpeed: { type: integer, notnull: true }

DigitalBetacam:
  inheritance:
    extends: FormatTypedVideoRecording
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 42 # All are aggregated within the FormatType table
  columns:
    bitrate: { type: string(255) }

FormatVersionedVideoRecordingType: # Abstract
  inheritance:
    extends: SizedVideoRecordingFormatType
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 43 # All are aggregated within the FormatType table
  columns:
    formatVersion: { type: integer, notnull: true }

Umatic:
  inheritance:
    extends: FormatVersionedVideoRecordingType
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 44 # All are aggregated within the FormatType table
    #columns:

HDCam:
  inheritance:
    extends: FormatVersionedVideoRecordingType
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 45 # All are aggregated within the FormatType table
  columns:
    speed: { type: string(255), notnull: true }
    scanning: { type: integer, notnull: true }

DVCPro:
  inheritance:
    extends: FormatVersionedVideoRecordingType
    #type: concrete
    type: column_aggregation
    keyField: type
    keyValue: 46 # All are aggregated within the FormatType table
  columns:
    recordingSpeed: { type: integer, notnull: true }

##################################### format_charactristics ####################################
CharacteristicsFormat:
  actAs: { Timestampable: ~ }
  columns:
    format_id: { type: integer }
    format_c_name: { type: string(255), notnull: ture }
  relations:
    FormatType:
      local: format_id
      foreign: id
      type: one
      
      
CharacteristicsFormatExtended: #Abstract
   inheritance:
     extends: FormatType
     #type: concrete
     type: column_aggregation
     keyField: type
     keyValue: 46 # All are aggregated within the FormatType table
   columns:
    recordingSpeed: { type: integer, notnull: true }
    material: { type: integer, notnull: true }
    oxidationCorrosion: { type: boolean, notnull: true }
    pack_deformation: { type: integer }
    materialsBreakdown: { type: boolean }
    recordingStandard: { type: integer, notnull: true }
    sheddingSoftBinder: { type: boolean }
##################################### charactristics_constraints ################################   
CharacteristicsConstraints:
  actAs: { Timestampable: ~ }
  columns:
    constraint_name: { type: string(255) }
    constraint_value: { type: string(255) }
    constraint_readable: { type: string(255) }
      
##################################### constraints_value #########################################     
CharacteristicsValues:
  actAs: { Timestampable: ~ }
  columns:
    c_name:  { type: string(255) }
    c_score:  { type: float }
    format_id: { type: integer }  
    constraint_id:  { type: integer }
    parent_characteristic_id: { type: integer }
  relations:
    CharacteristicsFormat:
      local: parent_characteristic_id
      foreign: id
      type: one
    FormatType:
      local: format_id
      foreign: id
      type: one
    CharacteristicsConstraints:
      local: constraint_id
      foreign: id
      type:  one

#################################### charactristics_value ######################################
#CharacteristicsFormatConstraints: # For the one-to-many relationship between Charactristics , Format and Constraints entities
#  columns:
#    format_id: { type: integer }
#    characteristic_id: { type: integer }
#    characteristic_constraint_id: { type: integer }
#  relations:
#    CharacteristicsFormat:
#      local: characteristic_id
#      foreign: id
#      type: one
#    FormatType:
#      local: format_id
#      foreign: id
#      type: one
#    CharacteristicsConstraints:
#      local: characteristic_constraint_id
#      foreign: id
#      type:  one
################################################################################################
################################################################################################

SimpleSubUnit: # Abstract
  inheritance:
    extends: Unit
    type: column_aggregation
  columns:
    parent_node_id: { type: integer }
