<?php

/**
 * BaseSet
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property string $inst_id
 * @property text $notes
 * @property integer $creator_id
 * @property integer $last_editor_id
 * @property string $type
 * @property text $resident_structure_description
 * @property integer $storage_location_id
 * @property integer $unit_personnel
 * @property integer $parent_node_id
 * @property string $status
 * @property string $location
 * @property integer $format_id
 * @property Evaluator $Evaluator
 * @property User $User
 * 
 * @method string    getName()                           Returns the current record's "name" value
 * @method string    getInstId()                         Returns the current record's "inst_id" value
 * @method text      getNotes()                          Returns the current record's "notes" value
 * @method integer   getCreatorId()                      Returns the current record's "creator_id" value
 * @method integer   getLastEditorId()                   Returns the current record's "last_editor_id" value
 * @method string    getType()                           Returns the current record's "type" value
 * @method text      getResidentStructureDescription()   Returns the current record's "resident_structure_description" value
 * @method integer   getStorageLocationId()              Returns the current record's "storage_location_id" value
 * @method integer   getUnitPersonnel()                  Returns the current record's "unit_personnel" value
 * @method integer   getParentNodeId()                   Returns the current record's "parent_node_id" value
 * @method string    getStatus()                         Returns the current record's "status" value
 * @method string    getLocation()                       Returns the current record's "location" value
 * @method integer   getFormatId()                       Returns the current record's "format_id" value
 * @method Evaluator getEvaluator()                      Returns the current record's "Evaluator" value
 * @method User      getUser()                           Returns the current record's "User" value
 * @method Set       setName()                           Sets the current record's "name" value
 * @method Set       setInstId()                         Sets the current record's "inst_id" value
 * @method Set       setNotes()                          Sets the current record's "notes" value
 * @method Set       setCreatorId()                      Sets the current record's "creator_id" value
 * @method Set       setLastEditorId()                   Sets the current record's "last_editor_id" value
 * @method Set       setType()                           Sets the current record's "type" value
 * @method Set       setResidentStructureDescription()   Sets the current record's "resident_structure_description" value
 * @method Set       setStorageLocationId()              Sets the current record's "storage_location_id" value
 * @method Set       setUnitPersonnel()                  Sets the current record's "unit_personnel" value
 * @method Set       setParentNodeId()                   Sets the current record's "parent_node_id" value
 * @method Set       setStatus()                         Sets the current record's "status" value
 * @method Set       setLocation()                       Sets the current record's "location" value
 * @method Set       setFormatId()                       Sets the current record's "format_id" value
 * @method Set       setEvaluator()                      Sets the current record's "Evaluator" value
 * @method Set       setUser()                           Sets the current record's "User" value
 * 
 * @package    mediaSCORE
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseSet extends sfDoctrineRecord {

    public function setTableDefinition() {
        $this->setTableName('set');
        $this->hasColumn('name', 'string', 255, array(
            'type' => 'string',
            'notnull' => true,
            'length' => 255,
        ));
        $this->hasColumn('inst_id', 'string', 255, array(
            'type' => 'string',
            'length' => 255,
        ));
        $this->hasColumn('notes', 'text', null, array(
            'type' => 'text',
        ));
        $this->hasColumn('creator_id', 'integer', null, array(
            'type' => 'integer',
            'notnull' => true,
        ));
        $this->hasColumn('last_editor_id', 'integer', null, array(
            'type' => 'integer',
        ));
        $this->hasColumn('type', 'string', 255, array(
            'type' => 'string',
            'length' => 255,
        ));
        $this->hasColumn('resident_structure_description', 'text', null, array(
            'type' => 'text',
        ));
        $this->hasColumn('storage_location_id', 'integer', null, array(
            'type' => 'integer',
        ));
        $this->hasColumn('unit_personnel', 'integer', null, array(
            'type' => 'integer',
        ));
        $this->hasColumn('parent_node_id', 'integer', null, array(
            'type' => 'integer',
        ));
        $this->hasColumn('status', 'string', 255, array(
            'type' => 'string',
            'length' => 255,
        ));
        $this->hasColumn('location', 'string', 255, array(
            'type' => 'string',
            'length' => 255,
        ));
        $this->hasColumn('format_id', 'integer', null, array(
            'type' => 'integer',
        ));

        $this->setSubClasses(array(
            'Unit' =>
            array(
                'type' => 1,
            ),
            'SubUnit' =>
            array(
                'type' => 2,
            ),
            'Collection' =>
            array(
                'type' => 1,
            ),
            'AssetGroup' =>
            array(
                'type' => 2,
            ),
        ));
    }

    public function setUp() {
        parent::setUp();
        $this->hasOne('Evaluator', array(
            'local' => 'creator_id',
            'foreign' => 'id'));

        $this->hasOne('User', array(
            'local' => 'last_editor_id',
            'foreign' => 'id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }

}