<?php

/**
 * BaseCollectionMultipleAssetGroup
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property Unit $Unit
 * @property Doctrine_Collection $AssetGroup
 * @property Doctrine_Collection $StorageLocations
 * @property UnitMultipleCollection $containCollections
 * 
 * @method Unit                         getUnit()               Returns the current record's "Unit" value
 * @method Doctrine_Collection          getAssetGroup()         Returns the current record's "AssetGroup" collection
 * @method Doctrine_Collection          getStorageLocations()   Returns the current record's "StorageLocations" collection
 * @method UnitMultipleCollection       getContainCollections() Returns the current record's "containCollections" value
 * @method CollectionMultipleAssetGroup setUnit()               Sets the current record's "Unit" value
 * @method CollectionMultipleAssetGroup setAssetGroup()         Sets the current record's "AssetGroup" collection
 * @method CollectionMultipleAssetGroup setStorageLocations()   Sets the current record's "StorageLocations" collection
 * @method CollectionMultipleAssetGroup setContainCollections() Sets the current record's "containCollections" value
 * 
 * @package    mediaSCORE
 * @subpackage model
 * @author     Nouman Tayyab
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseCollectionMultipleAssetGroup extends SubUnit
{
    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Unit', array(
             'local' => 'parent_node_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('AssetGroup', array(
             'local' => 'id',
             'foreign' => 'parent_node_id'));

        $this->hasMany('StorageLocation as StorageLocations', array(
             'refClass' => 'CollectionStorageLocation',
             'local' => 'collection_id',
             'foreign' => 'storage_location_id'));

        $this->hasOne('UnitMultipleCollection as containCollections', array(
             'local' => 'parent_node_id',
             'foreign' => 'id'));
    }
}